on:
  [push, pull_request]

name: Build

env:
  AWS_REGION: eu-west-1
  CLUSTER: jekyll-contained
  SERVICE: jekyll-contained
  CONTAINER_IMAGE: jekyll-contained:${{ github.sha }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1.0.0

    - name: Setup AWS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
        AWS_ROLE_EXTERNAL_ID: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
      run: |
        # register the session token secret with the runner to ensure it is masked in logs
        echo "::add-mask::AWS_SESSION_TOKEN"

        # generate a session token
        AWS_SESSION_TOKEN=$( aws sts assume-role \
          --role-arn $AWS_ROLE_ARN \
          --role-session-name $GITHUB_SHA \
          --external-id $AWS_ROLE_EXTERNAL_ID | jq '.Credentials.SessionToken' --raw-output )

        # ::set-env will propogate these env vars to subsequents steps in this job
        echo "::set-env name=AWS_ACCESS_KEY_ID,::${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "::set-env name=AWS_SECRET_ACCESS_KEY,::${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        echo "::set-env name=AWS_SESSION_TOKEN,::${{ secrets.AWS_SESSION_TOKEN }}"
        echo "::set-env name=AWS_DEFAULT_REGION,::${AWS_REGION}"
        echo "::set-env name=AWS_DEFAULT_OUTPUT,::json"

    - name: Verify identity
      run: |
        aws sts get-caller-identity

    - name: Setup ECR
      run: |
        # Login to AWS ECR
        $( aws ecr get-login --region $AWS_REGION --no-include-email )

    - name: Build, tag, and push image
      run: |
        # Build and tag the image
        docker build \
          -t $CONTAINER_IMAGE \
          -t $GITHUB_REPOSITORY:$GITHUB_SHA \
          -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$CONTAINER_IMAGE .
        # Save the image so it can be uploaded as an artifact
        docker save $CONTAINER_IMAGE | gzip > ./jekyll-contained.tar.gz
        # Push image to AWS ECR
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$CONTAINER_IMAGE

    - name: Render task definition
      run: |
        # Update task-definition with new image
        export IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$CONTAINER_IMAGE
        cat .aws/task-definition.json \
          | jq '.containerDefinitions[0].image |= env.IMAGE' \
          > "${RUNNER_TEMP}/task-definition.json"

    - name: Register task definition
      run: |
        # Register the new task-definition
        TASK_DEFINITION_ARN=$( aws ecs register-task-definition \
          --cli-input-json file://"${RUNNER_TEMP}/task-definition.json" \
          | jq -r '.taskDefinition.taskDefinitionArn' )
        # Deploy new task definition to the existing service
        aws ecs update-service --cluster $CLUSTER --service $SERVICE --task-definition $TASK_DEFINITION_ARN

    - name: Wait for services to stabilize
      run: |
        # Wait for services to stabilize
        aws ecs wait services-stable --cluster $CLUSTER --services $SERVICE

    - name: Report public web address
      run: |
        # Get the task ARN
        TASK_ARN=$( aws ecs list-tasks --cluster $CLUSTER | jq -r '.taskArns[0]' )
        # Get the network interface id
        NETWORK_INTERFACE_ID=$( aws ecs describe-tasks --cluster $CLUSTER --tasks $TASK_ARN \
          | jq -r '.tasks[0].attachments[0].details[] | select(.name == "networkInterfaceId") | .value' )
        # Get the public IP etc
        aws ec2 describe-network-interfaces --network-interface-ids $NETWORK_INTERFACE_ID \
          | jq -r '.NetworkInterfaces[0].Association | .PublicDnsName, .PublicIp'
