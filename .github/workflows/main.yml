on:
  push:
    branches:
      - master

name: Deploy to Amazon ECS

jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      CLUSTER: jekyll-contained
      SERVICE: jekyll-contained
      CONTAINER_IMAGE: jekyll-contained:${{ github.sha }}

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      env:
        AWS_REGION: eu-west-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        # ::set-env will propogate these env vars to subsequents steps in this job
        echo "::set-env name=AWS_ACCESS_KEY_ID,::${AWS_ACCESS_KEY_ID}"
        echo "::set-env name=AWS_SECRET_ACCESS_KEY,::${AWS_SECRET_ACCESS_KEY}"
        echo "::set-env name=AWS_DEFAULT_REGION,::${AWS_REGION}"
        echo "::set-env name=AWS_DEFAULT_OUTPUT,::json"

    - name: Login to Amazon ECR
      run: |
        # Login to AWS ECR
        $( aws ecr get-login --region $AWS_REGION --no-include-email )

    - name: Build, tag, and push image to Amazon ECR
      run: |
        # Build a container and push it to ECR
        docker build \
          -t $CONTAINER_IMAGE \
          -t $GITHUB_REPOSITORY:$GITHUB_SHA \
          -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$CONTAINER_IMAGE .
        # Push image to AWS ECR
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$CONTAINER_IMAGE

    - name: Fill in the new image ID in the Amazon ECS task definition
      run: |
        # Update task-definition with new image
        export IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$CONTAINER_IMAGE
        cat .aws/task-definition.json \
          | jq '.containerDefinitions[0].image |= env.IMAGE' \
          > "${RUNNER_TEMP}/task-definition.json"

    - name: Deploy Amazon ECS task definition
      run: |
        # Register the new task-definition
        TASK_DEFINITION_ARN=$( aws ecs register-task-definition \
          --cli-input-json file://"${RUNNER_TEMP}/task-definition.json" \
          | jq -r '.taskDefinition.taskDefinitionArn' )
        # Deploy new task definition to the existing service
        aws ecs update-service --cluster $CLUSTER --service $SERVICE --task-definition $TASK_DEFINITION_ARN

    - name: Wait for services to stabilize
      run: |
        # Wait for services to stabilize
        aws ecs wait services-stable --cluster $CLUSTER --services $SERVICE
